#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define A 0.5
#include "type.h"
#include "help.h"
#include "tree.h"
void inorder(Node *root, Node ***root2, int *len){
    if(root == NULL) return;
    if (root->left){
        inorder(root->left, root2, len);
    }
    (*root2) = realloc(*root2, sizeof(Node) * (*len + 1));
    (*root2)[*len] = root;
    *len += 1;
    if (root->right){
        inorder(root->right, root2, len);
    }
}
int count(Node *root){
    if (root == NULL){
        return 0;
    }
    return count(root->left) + count(root->right) + 1;
}
Node *rebalance(int left, int right, Node *root, Node ***root2){
    if (right < left){
        return NULL;
    }
    int ind = (left + right) / 2;
    Node *tmp = (*root2)[ind];
    if (root != NULL) {
        if (strcmp(tmp->key, (root)->key) < 0){
            (root)->left = tmp;
        }
        else {
            (root)->right = tmp;
        }
    }
    tmp->par = root;
    tmp->left = rebalance(left, ind - 1, tmp, root2);
    tmp->right = rebalance(ind + 1, right, tmp,root2);
    return tmp;
}
int balance(Node **root, Tree **tree){
    if (*root == NULL){
        return 1;
    }
    int l = 0;
    int r = 0;
    if ((*root)->left){
        l = count((*root)->left);
    }
    if ((*root)->right){
        r = count((*root)->right);
    }
    int ro = count((*root));
    if (l <= ro * A && r <= ro * A){
        balance(&(*root)->par, tree);
    }
    else{
        int len = 0;
        Node **root2 = malloc(sizeof(Node *));
        inorder((*root), &root2, &len);
        if ((*root)->par == NULL){
            (*tree)->root = rebalance(0, len-1, NULL, &root2);
        }
        else{
            rebalance(0, len-1, (*root)->par, &root2);
        }
        free(root2);
    }
    return 1;
}
int add(Node **par, Node **root, char *key, int data, Tree **tree){
    if ((*root) == NULL){
        (*root) = malloc(sizeof(Node));
        (*root)->key = strdup(key);
        (*root)->info = malloc(sizeof(Info));
        (*root)->info->data = data;
        (*root)->left = NULL;
        (*root)->right = NULL;
        (*root)->par = *par;
        balance(root, tree);
        return -1;
    }
    if (strcmp(key, (*root)->key) > 0){
        add(&(*root), &(*root)->right, key, data, tree);
    }
    else if (strcmp(key, (*root)->key) < 0){
        add(&(*root), &(*root)->left, key, data, tree);
    }
    else{
        return 1;
    }
}
Node *findPar(Node **root, char *key){
    if (*root == NULL){
        return *root;
    }
    if ((*root)->left != NULL && strcmp((*root)->left->key, key) == 0){
        return (*root);
    }
    if ((*root)->right != NULL && strcmp((*root)->right->key, key) == 0){
        return (*root);
    }
    if (strcmp(key, (*root)->key) < 0) {
        return findPar(&(*root)->left, key);
    }
    else{
        return findPar(&(*root)->right, key);
    }
}
Node *find_min(Node **root){
    Node *tmp = *root;
    while (tmp -> left != NULL) {
        tmp = tmp->left;
    }
    return tmp;
}
Node *find(Node **root, char *key){
    if ((*root) == NULL || strcmp((*root)->key, key) == 0){
        return *root;
    }
    if (strcmp(key, (*root)->key) < 0) {
        return find(&(*root)->left, key);
    }
    else if (strcmp(key, (*root)->key) > 0){
        return find(&(*root)->right, key);
    }
    else{
        return NULL;
    }
}
int input(Tree **tree) {
    FILE *start;
    printf("Введите название файла:\n");
    char *st = getStr(), st1[100], st2[100];
    start = fopen(st, "r");
    if (start == NULL) {
        printf("Такого файла не существует.\n");
        free(st);
        return 1;
    }
    while (!feof(start)){
        char buf[1] = {0}, *res;
        int f = 1, str_len = 0;
        res = malloc(sizeof(char));
        while(f == 1){
            int buflen = 0;
            fscanf(start, "%1[^\n]%n", buf, &buflen);
            if (buflen == 1){
                res = realloc(res, sizeof(char) * (str_len + 2));
                res[str_len] = buf[0];
                str_len += 1;
            }
            else{
                f = 0;
            }
        }
        if (str_len == 0){
            free(res);
            fscanf(start, "%*1[\n]");
        }
        else{
            int data;
            fscanf(start, "%*1[\n]");
            fscanf(start, "%d", &data);
            res[str_len] = '\0';
            Node *tmp = NULL;
            add(&tmp, &(*tree)->root, res, data, tree);
            free(res);
        }
    }
    free(st);
    fclose(start);
    return 1;
}
int full(Tree **tree){
    printf("Введите число элементов:\n");
    int n = getInt();
    for (int i = 0; i < n; i++){
        int data = i;
        char *res = malloc(sizeof(char));
        int len = 0;
        int k = data;
        while (data>0){
            res = realloc(res, sizeof(char) * (len + 2));
            res[len] = '1' + data%10 -1;
            len += 1;
            data /= 10;
        }
        res[len] = '\0';
        Node *tmp = NULL;
        add(&tmp, &(*tree)->root, res, k, tree);
        free(res);
    }
    return 1;
}
int del(Node **root, char *key, Tree **tree){
    Node *y = find(&(*root), key);
    if (y == NULL){
        return 0;
    }
    if (strcmp((*root)-> key, key) == 0){
        if ((*root)->right == NULL && (*root)->left == NULL){
            free((*root)->key);
            free((*root)->info);
            *root = NULL;
            free(y);
            balance(root, tree);
            return 1;
        }
        else if ((*root)->right != NULL && (*root)->left != NULL){
            Node *tmp = find_min(&(*root)->right);
            (*root)->info->data = tmp->info->data;
            free((*root)->key);
            (*root)->key = strdup(tmp->key);
            del(&(*root)->right, tmp->key, tree);
            balance(root, tree);
            return 1;
        }
        else if ((*root)->right != NULL){
            free((*root)->key);
            free((*root)->info);
            (*root) = (*root)->right;
            free(y);
            balance(root, tree);
            return 1;
        }
        else if ((*root)->left != NULL){
            free((*root)->key);
            free((*root)->info);
            (*root) = (*root)->left;
            free(y);
            balance(root, tree);
            return 1;
        }
    }
    Node *par = findPar(&(*root), key);
    if (y->left == NULL && y->right == NULL){
        if (par->left != NULL && strcmp(par->left->key,key) == 0){
            par->left = NULL;
        }
        else if (par->right != NULL && strcmp(par->right->key,key) == 0){
            par->right = NULL;
        }
        free(y->info);
        free(y->key);
        free(y);
        balance(root, tree);
        return 1;
    }
    else if (y->left != NULL && y->right != NULL){
        Node *tmp = find_min(&y->right);
        y->info->data = tmp->info->data;
        free(y->key);
        y->key = strdup(tmp->key);
        del(&y->right, tmp->key, tree);
        balance(root, tree);
        return 1;
    }
    else{
        if (y->left != NULL){
            if (par->left != NULL && strcmp(par->left->key,key) == 0){
                par->left = y->left;
            }
            else if (par->right != NULL && strcmp(par->right->key,key) == 0){
                par->right = y->left;
            }
            free(y->info);
            free(y->key);
            free(y);
            balance(root, tree);
            return 1;
        }
        else {
            if (par->left != NULL && strcmp(par->left->key,key) == 0){
                par->left = y->right;
            }
            else if (par->right != NULL && strcmp(par->right->key,key) == 0){
                par->right = y->right;
            }
            free(y->info);
            free(y->key);
            free(y);
            balance(root, tree);
            return 1;
        }
    }
}
int obxod(Node **root){
    if (*root == NULL)
        return 1;
    obxod(&(*root)->left);
    obxod(&(*root)->right);
    printf("%s ", (*root)->key);
    return 1;
}
Node *find_max(Node **root, char* n){
    Node *tmp = *root;
    if (tmp->right != NULL && strcmp(tmp->key, n) < 0){
        find_max(&tmp->right, n);
    }
    else if (tmp->left != NULL && strcmp(tmp->key, n) > 0){
        find_max(&tmp->left, n);
    }
    else{
        return tmp;
    }
}
void show2(Node *root, int space) {
    if (!root)
        return;
    enum { COUNT = 2 };
    space += COUNT;
    show2(root->right, space);
    for (int i = COUNT; i < space; ++i)
        printf(" ");
    printf("%s\n", root->key);
    show2(root->left, space);
}
int clear(Node **root){
    if (*root == NULL){
        return 1;
    }
    if ((*root)->left){
        clear(&(*root)->left);
    }
    if ((*root)->right){
        clear(&(*root)->right);
    }
    if ((*root)->key){
        free((*root)->key);
    }
    if ((*root)->info){
        free((*root)->info);
    }
    free(*root);
    return 1;
}
